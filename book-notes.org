* Part I: Foundations
** Preface: Invalidating Axioms

Not much to note here. Things take time
** Introduction

Architecture is about the important stuff... whatever that is - Ralph Johnson

#+DOWNLOADED: screenshot @ 2024-03-23 19:53:18
[[file:Introduction/2024-03-23_19-53-18_screenshot.png]]

1. The industry doesn't have a good definition of software
   architecture itself.
2. The role of software architect embodies a massive amount and scope
   of responsibility that continues to expand.
3. Software architecture is a constantly moving target because of the
   rapidly evolving software development ecosystem.
4. Much of the material about software architecture has only
   historical relevance.

When studying architecture, readers must keep in mind that, like much
art, it can only be properly understood in context.

*** Defining Software Architecture

Architecture characteristics:
- Availability
- Reliability
- Testability
- Scalability
- Security
- Agility
- Fault Tolerance
- Elasticity
- Recoverability
- Performance
- Deployability
- Learnability

Core expectations of a Software Architect:
- Make architecture decisions
- Continually analyze the architecture
- Keep current with latest trends
- Ensure compliance with decisions
- Diverse exposure and experience
- Have business domain knowledge
- Possess interpersonal skills
- Understand and navigate politics

All architectures become iterative because of unknown unknowns, Agile
just recognizes this and does it sooner - Mark Richards


#+DOWNLOADED: screenshot @ 2024-03-23 20:18:39
[[file:Introduction/2024-03-23_20-18-39_screenshot.png]]
** Architectural Thinking

Balancing a portfolio of knowledge regarding depth vs breadth is
something every developer should consider throughout their career.
** Modularity

We use modularity to describe a logical grouping of related code,
which could be a group of classes in  an object-oriented language or
functions in a structured or functional language. For discussion about
architecture, we use modularity as a general term to denote a related
grouping of code: classes, functions, or any other grouping.
*** Measuring Modularity
**** Cohesion
Cohesion refers to what extent the parts of a module should be
contained within the same module. It is a measure of how related the
parts are to one another.

A measure:

LCOM - The sum of sets of methods not shared via sharing fields

**** Coupling

Method calls and returns form a call graph, so we can analyze using
graph theory.

*Afferent* coupling measures the number of /incoming/ connections to a
code artifact and *Efferent* coupling measures the number of /outgoing/ connections.

**** Abstractness, Instability, and Distance from the Main Sequence

Abstractness: $A = \frac{\Sigma m^a}{\Sigma m^c}$

where:
- $m^a$ represents abstract elements
- $m^c$ represents concrete elements

  For example, an application with 5000 lines of code all in one main
  method would have 1 abstract element and 5000 concrete elements for
  an abstractness of 1/5000.

Instability: $I = \frac{C^e}{C^e + C^a}$

Where:
- $C^e$ represents efferent (or outgoing) coupling
- $C^a$ represents afferent (or incoming) coupling

  The instability metric determines the volatility of a code base. A
  code base that exhibits high degrees of instability breaks more
  easily when changed because of high coupling.

**** Distance from the Main Sequence

This is a derived measure based on instability and abstractness

$D = |A + I - 1|$

*** Connascence

Two components are connascent if a change in one would require the
other to be modified in order to maintain the overall correctness of
the system - Meilir Page-Jones

*Static Connascence* refers to source-code level coupling (as opposed to
execution-time coupling). It is a refinement of the afferent and
efferent couplings.

*Connascence of X*
Multiple components must agree on the X of an entity
X:
- name
- type
- meaning / convention
- position
- algorithm

The other type of connascence is *dynamic connascence*, which analyzes
calls at runtime.

- Execution (order of execution of multiple components is important)
- Timing
- Values (occurs when several values relate to one another and must
  change together)
- Identity (multiple components must reference the same entity)

** Architecture Characteristics Defined

An architecture characteristic meets 3 criteria:
- Specifies a nondomain design consideration
  - specify operational and design criteria for success, concerning
    how to implement the requirements and why certain choices were
    made.
- Influences some structural aspect of the design
  - Does the architecture require special structural consideration to
    succeed?
- Is critical or important to application success
  - Apps could support a large number of architecture characteristics,
    but the shouldn't. Support for each architecure characteristic
    adds complexity to the design. A critical job for architects lies
    in choosing the fewest architecture characteristics rather than
    the most possible.

*** Architectural Characteristics (Partially) Listed

**** Operational Characteristics

| Term               | Definition                                                                                                          |
|--------------------+---------------------------------------------------------------------------------------------------------------------|
| Availability       | How long the system will need to be available (if 24/7, steps need to be in place to allow the system to be up and running quickly in case of any failure). |
| Continuity         | Disaster recovery capability.                                                                                       |
| Performance        | Includes stress testing, peak analysis, analysis of the frequency of functions used, capacity required, and response times. Performance acceptance sometimes requires an exercise of its own, taking months to complete. |
| Recoverability     | Business continuity requirements (e.g., in case of a disaster, how quickly is the system required to be on-line again?). This will affect the backup strategy and requirements for duplicated hardware. |
| Reliability/Safety | Assess if the system needs to be fail-safe, or if it is mission critical in a way that affects lives. If it fails, will it cost the company large sums of money? |
| Robustness         | Ability to handle error and boundary conditions while running if the internet connection goes down or if there’s a power outage or hardware failure. |
| Scalability        | Ability for the system to perform and operate as the number of users or requests increases.                         |

**** Structural Characteristics

| Term                  | Definition                                                                                                          |
|-----------------------+---------------------------------------------------------------------------------------------------------------------|
| Configurability       | Ability for the end users to easily change aspects of the software’s configuration (through usable interfaces).     |
| Extensibility         | How important it is to plug new pieces of functionality in.                                                         |
| Installability        | Ease of system installation on all necessary platforms.                                                             |
| Leverageability/Reuse | Ability to leverage common components across multiple products.                                                     |
| Localization          | Support for multiple languages on entry/query screens in data fields; on reports, multibyte character requirements and units of measure or currencies. |
| Maintainability       | How easy it is to apply changes and enhance the system?                                                             |
| Portability           | Does the system need to run on more than one platform? (For example, does the frontend need to run against Oracle as well as SAP DB?) |
| Supportability        | What level of technical support is needed by the application? What level of logging and other facilities are required to debug errors in the system? |
| Upgradeability        | Ability to easily/quickly upgrade from a previous version of this application/solution to a newer version on servers and clients. |

**** Cross-Cutting Characteristics

| Term                     | Definition                                                                                                          |
|--------------------------+---------------------------------------------------------------------------------------------------------------------|
| Accessibility            | Access to all your users, including those with disabilities like colorblindness or hearing loss.                    |
| Archivability            | Will the data need to be archived or deleted after a period of time? (For example, customer accounts are to be deleted after three months or marked as obsolete and archived to a secondary database for future access.) |
| Authentication           | Security requirements to ensure users are who they say they are.                                                    |
| Authorization            | Security requirements to ensure users can access only certain functions within the application (by use case, subsystem, webpage, business rule, field level, etc.). |
| Legal                    | What legislative constraints is the system operating in (data protection, Sarbanes Oxley, GDPR, etc.)? What reservation rights does the company require? Any regulations regarding the way the application is to be built or deployed? |
| Privacy                  | Ability to hide transactions from internal company employees (encrypted transactions so even DBAs and network architects cannot see them). |
| Security                 | Does the data need to be encrypted in the database? Encrypted for network communication between internal systems? What type of authentication needs to be in place for remote user access? |
| Supportability           | What level of technical support is needed by the application? What level of logging and other facilities are required to debug errors in the system? |
| Usability/Serviceability | Level of training required for users to achieve their goals with the application/solution. Usability requirements need to be treated as seriously as any other architectural issue. |


** Identifying Architectural Characteristics

An architect uncovers architecture characteristics in at least 3 ways
by extracting from:
- domain concerns
- requirements
- implicit domain knowledge

Don't obsess over the number of characteristics, but rather the
motivation to keep design simple.

Many architects and domain stakeholders want to prioritize the final
list of architecture characteristics that the app or system must
support. While this is desirable, in most cases it is a fool's errand
and will not only waste time, but also produce a lot of unnecessary
frustration and disagreement with the key stakeholders.

A better approach is to have the domain stakeholders select the top 3
most important characterstics from the final list (in any order).

** Measuring and Governing Architecture Characteristics

This chapter focuses on concretely defining some of the more common
architecture characteristics and building governance mechanisms for
them.

Several common problems exist around the definition of architecture
characteristics in organizations:

- They aren't physics
  - definitions are all over the place
- Wildly varying definitions
  - different departments may disagree on the definition of critical
    features such as performance.
- Too composite
  - Many desirable architecture characteristics comprise many others
    at a smaller scale.

Architecture fitness function
- Any mechanism that provides an objective integrity assessment of
  some architecture characteristic or combination of architecture
  characteristics.

** Scope of Architecture Characteristics

Architecture Quantum
An independently deployable artifact with high functional cohesion and
synchronous connascence

- independently deployable
  - includes all necessary components to function independently from
    other parts of the architecture
- high functional cohesion
  - how well the contained code is unified in purpose
- synchronous connascence
  - this implies synchronous calls within an application context or
    between distributed services that form the architecture quantum.
    - if one service calls another, and one is more scalable than the
      other, timeouts and other reliability concerns will occur.

** Component-based Thinking

In this chapter, we discuss architectural considerations around
components, ranging from scope to discovery.

Typically, the architect refines, manages, and governs components
within an architecture. They must identify components as one of the
first tasks in a new project. Before they can do that, they must know
how to partition the architecture.

*Domain Partitioning*

separates top-level components by workflows and/or domains

Advantages
- modeled more closely to how the business functions rather than an
  implementation detail.
- Easier to utilize the inverse Conway maneuver to build
  cross-functional teams around domains.
- Aligns more closely with the modular monolith and microservices
  architecture styles
- Message flow matches the domain problem
- Easy to migrate data and components to distributed architecture

Disadvantage
- Customization code appears in multiple places

*Technical Partitioning*
separates top-level components based on technical capabilities rather
than discrete workflows.

Advantages
- clearly separates customization code
- aligns more closely to the layered architecture pattern

Disadvantages
- Higher degree of global coupling. Changes to either the common or
  local components will likely affect all the other components
- Developers may have to duplicate domain concepts in both common and
  local layers
- Typically higher coupling at the data level.

* Part II: Architecture Styles

We define an /architecture style/ as the overarching structure of how
the user interface and backend source code are organized (such as
within layers of a monolithic deployment or separately deployed
services) and how that source code interacts with a datastore.

/Architecture patterns/ are lower-level design structures that help form
specific solutions within an architecture style (such as how to
achieve high scalability or high performance within a set of
operations or between sets of services).

** Foundations

*** Big Ball of Mud
Architects refer to the absence of any discernible architecture
structure as a /Big Ball of Mud/.

*** Unitary Architecture

The combination of the hardware software. These days it's mostly just
embedded systems and other highly constrained environments.

*** Client/Server

A fundamental style in which we separate the technical functionality
between frontend and backend, called a /two-tier,/ or /client/server/
architecture.

*** Desktop + Database Server

Early personal computer architecture where there is a rich in
functionality gui that pings back to a separate database server. It
allowed presentation logic to reside on the desktop, while the more
computationally intense action occurred on more robust data servers.

*** Browser + Web Server

Modern equivalent of above.

*** Three-tier

Became popular in the 90s. Usually has a database tier, an application
tier, and a frontend coded in generated html / js.

*** Monolithic vs. Distributed Architectures

- Monolithic
  - Layered
  - Pipeline
  - Microkernel

- Distributed
  - Service-based
  - Event-driven
  - Space-based
  - Service-oriented
  - Microservices

Distributed architectures face some fallacies:
1. The network is reliable
2. Latency is zero
3. Bandwidth is infinite
4. The network is secure
5. The topology never changes
6. There is only one administrator
7. Transport cost is zero
8. The network is homogenous

In addition to the 8 fallacies above, there are other issues facing
distributed architectures that aren't present in monolithic
architectures:

- Distributed logging
- Distributed transactions
- Contract maintenance and versioning

** Layered Architecture Style

*Conway's Law* - Organizations that design systems are constrained to
produce designs which are copies of the communication structures of
these organizations.

*** Topology

Most consist of 4 standard layers:


#+DOWNLOADED: screenshot @ 2024-03-24 15:30:20
[[file:Part_II:_Architecture_Styles/2024-03-24_15-30-20_screenshot.png]]

MB:

#+DOWNLOADED: screenshot @ 2024-03-24 15:32:18
[[file:Part_II:_Architecture_Styles/2024-03-24_15-32-18_screenshot.png]]

Rest:

#+DOWNLOADED: screenshot @ 2024-03-24 15:32:36
[[file:Part_II:_Architecture_Styles/2024-03-24_15-32-36_screenshot.png]]

GPI:

#+DOWNLOADED: screenshot @ 2024-03-24 15:32:50
[[file:Part_II:_Architecture_Styles/2024-03-24_15-32-50_screenshot.png]]

*** Layers of Isolation

Layers can be /closed/ or /open/. A closed layer means that as a request
moves top-down from layer to layer, the request can not skip any
layers, but rather must go through the layer immediately below it to
get to the next layer.

It would be much faster to allow the presentation layer to access the
database directly for simple retrieval requests, bypassing any
unnecessary layers.

The /layers of isolation/ concept means that changes made in one layer
of the architecture generally don't impact or affect components in
other layers, providing the contracts between these layers remains
unchanged. To support layers of isolation, layers involved with the
major flow of the request necessarily have to be closed. If the
presentation layer can directly access the persistence layer, then
changes made to the persistence layer would impact both the business
layer and the presentation layer, producing a very tightly coupled
application with layer interdependencies between components.

*** Adding Layers

You can also set up a mix of open and closed layers. An example used
is creating another open layer (e.g. a common components layer) in
which some of the parts of the business layer can interact, and other
parts of the business layer can skip by.

*** Other Considerations

Commonly used as a first pass while architects are figuring out
whether microservices is the right architecture choice.

One thing to watch out for is the /architecture sinkhole/
anti-pattern. This happens when requests move from layer to layer as
simple pass-through processing with no business logic performed within
each layer. Every layered architecture has some sinkholes. Use the
80-20 rule (80% non-sinkholes, 20% sinkholes).

*** Why Use This Architecture Style
- good starting point
- familiar and simple
- low cost

#+DOWNLOADED: screenshot @ 2024-03-24 15:46:22
[[file:Part_II:_Architecture_Styles/2024-03-24_15-46-22_screenshot.png]]

** Pipeline Architecture Style

This is the underlying principle behind shells. Many tools that
utilize mapreduce follow this basic topology.


#+DOWNLOADED: screenshot @ 2024-03-24 16:28:34
[[file:Part_II:_Architecture_Styles/2024-03-24_16-28-34_screenshot.png]]

Pipes in this architecture form the communication channel between
filters. Each pipe is typically unidirectional and point-to-point for
performance reasons.

Filters are self-contained, independent from other filters, and
generally stateless. Filters should perform one task only.

Some types:
- Producer
  - starting point of a process
- Transformer
  - the map step
- Tester
  - the reduce step
- Consumer
  - Termination point for the pipeline flow

*** Architecture Characteristics Ratings


#+DOWNLOADED: screenshot @ 2024-03-24 16:34:08
[[file:Part_II:_Architecture_Styles/2024-03-24_16-34-08_screenshot.png]]

** Microkernel Architecture Style

This architecture style is a natural fit for product-based
applications (packaged and made available for download and
installation as a single, monolithic deployment, typically installed
on the customer's site as a third-party product).


#+DOWNLOADED: screenshot @ 2024-03-24 16:38:38
[[file:Part_II:_Architecture_Styles/2024-03-24_16-38-38_screenshot.png]]

Depending on the size and complexity, the core system can be
implemented as a layered architecture or a modular monolith. It is
typical for the entire monolithic application to share a single
database.


#+DOWNLOADED: screenshot @ 2024-03-24 16:41:10
[[file:Part_II:_Architecture_Styles/2024-03-24_16-41-10_screenshot.png]]


*** Registry

The core system needs to know about which plug-in modules are
available and how to get to them. One common way of implementing this
is through a plug-in registry.

*** Contracts

The contracts between the plug-in components and the core system are
usually standard across a domain of plug-in compoents and include
behavior, input data, and output data returned from the plug-in
component. Custom contracts are usually found in situations where
plug-in components are developed by a third party where you have no
control over the contract used by the plug-in.


#+DOWNLOADED: screenshot @ 2024-03-24 16:50:18
[[file:Part_II:_Architecture_Styles/2024-03-24_16-50-18_screenshot.png]]

** Service-Based Architecture Style

Service-based architecture is a hybrid of the microservices
architecture style and is considered one of the most pragmatic styles,
mostly due to its architectural flexibility.

*** Topology

A distributed macro layered structure consisting of a separately
deployed user interface, coarse-grained services, and a monolithic
database.


#+DOWNLOADED: screenshot @ 2024-03-24 16:57:00
[[file:Part_II:_Architecture_Styles/2024-03-24_16-57-00_screenshot.png]]

Because the services typically share a single monolithic database, the
number of services within an application context generally range
between 4 and 12 services, averaging about 7. We can also have as many
UIs hitting the services as we want and can split the database as
much as we want:


#+DOWNLOADED: screenshot @ 2024-03-24 16:59:39
[[file:Part_II:_Architecture_Styles/2024-03-24_16-59-39_screenshot.png]]

It is also possible to add an API layer consisting of a reverse proxy
or gateway between the user interface and services. This is a good
practice when exposing domain service functionality to external
systems or when consolidating shared cross-cutting concerns and moving
them outside of the user interface (such as metrics, security,
auditing requirements, and service discovery).


#+DOWNLOADED: screenshot @ 2024-03-24 17:01:51
[[file:Part_II:_Architecture_Styles/2024-03-24_17-01-51_screenshot.png]]

****
**** Reverse Proxies
A reverse proxy is a server that sits in front of web servers, forwarding client requests. It acts as an intermediary, hiding the origin servers and providing load balancing, SSL termination, caching, compression, and security.

***** Load Balancing
Distributes client requests to optimize resources and ensure fault tolerance.

***** SSL Termination
Handles SSL connections, decrypting requests, and passing them to web servers.

***** Caching
Stores copies of frequently accessed content for faster subsequent requests.

***** Compression
Compresses server responses to decrease bandwidth usage.

***** Security
Hides the identity of internal servers and provides defense against attacks.

**** Gateways
Gateways provide features specific to API traffic management. In the context of APIs, they're known as API gateways.

***** API Management
Routes API requests, enforces rate limits, and manages API versions.

***** Authentication and Authorization
Verifies tokens or keys for authorized access.

***** Request and Response Transformation
Modifies requests and responses, like header manipulation or format conversion.

***** Aggregation
Combines multiple service responses into one.

**** API Layer
The API layer is the part of the application where the actual business logic is implemented. It defines the operations exposed to clients.

***** Application-Specific Logic
Contains the logic for operations provided by the application.

***** Endpoint Definition
Defines the actual operations available to clients, like data retrieval or record modifications.

***** Direct Interaction with Data
Interacts directly with databases or storage to manage data.

*** Database Partitioning

Services within a service-based architecture usually share a single,
monolithic database.


#+DOWNLOADED: screenshot @ 2024-03-24 20:21:55
[[file:Part_II:_Architecture_Styles/2024-03-24_20-21-55_screenshot.png]]

** Event-Driven Architecture Style

Event-driven architecture is a popular distributed asynchronous
architecture style used to produce highly scalable and high
performance applications. It is highly adaptable and can be used for
small applications and large complex ones. It is made up of decoupled
event processing components that asynchronously receive and process
events.

Most applications follow what is called a *request-based model*. Requests made to the system to perform some sort of action are
sent to a request orchestrator. The request orchestrator is typically
a UI, but it can also be implemented through an API layer or
enterprise service bus. The role of the request orchestrator is to
deterministically and synchronously direct the request to various
request processors. The request processors handle the request, either
retrieving or updating information in a database.


#+DOWNLOADED: screenshot @ 2024-03-24 20:39:33
[[file:Part_II:_Architecture_Styles/2024-03-24_20-39-33_screenshot.png]]

An *event-based model*, on the other hand, reacts to a particular
situation and takes action based on that event.

*** Topology

There are 2 primary topologies within event-driven architecture:
- the mediator topology
  - commonly used when you require control over the workflow of an
    event process
- the broker topology
  - when you require a high degree of responsiveness and dynamic
    control over the processing of an event

**** Broker Topology

The broken topology differs from the mediator topology in that there
is no central event mediator. The message flow is distributed across
the event processor in a chain-like broadcasting fashion through a
lightweight message broker (such as RabbitMQ). This is useful when you
have a relatively simple event processing flow and you do not need
central event orchestration and coordination.

The event broker is usually federated (multiple domain-based cluster
instances), where each federated broker contains all of the event
channels used within the event flow for that particular
domain. Because of the decoupled async fire-and-forget broadcasting
nature of the broker topology, topics are usually used in the broker
topology using a pub-sub message model.


#+DOWNLOADED: screenshot @ 2024-03-24 20:45:25
[[file:Part_II:_Architecture_Styles/2024-03-24_20-45-25_screenshot.png]]


#+DOWNLOADED: screenshot @ 2024-03-24 20:50:56
[[file:Part_II:_Architecture_Styles/2024-03-24_20-50-56_screenshot.png]]


|------------------------+----------------------|
| Advantages             | Disadvantages        |
|------------------------+----------------------|
| Highly decoupled event | Workflow control     |
| processors             |                      |
| High scalability       | Error handling       |
| High responsiveness    | Recoverability       |
| High performance       | Restart capabilities |
| High fault tolerance   | Data inconsistency   |
|------------------------+----------------------|

All event processors are highly decoupled and independent of each
other. The best way to think about it is as a relay race.

**** Mediator Topology

Central to this topology is an event mediator, which manages and
controls the workflow for initiating events that require the
coordination of multiple event processors.

The architecture components that make up the mediator topology are:
- an initiating event
- an event queue
- an event mediator
- event channels
- event processors


#+DOWNLOADED: screenshot @ 2024-03-25 12:51:21
[[file:Part_II:_Architecture_Styles/2024-03-25_12-51-21_screenshot.png]]

Unlike the broker topology, event processors within the mediator
topology do not advertise what they did to the rest of the system.

*Trade-offs*

|---------------------------------+------------------------------------|
| Advantages over request-based   | Trade-offs                         |
|                                 |                                    |
|---------------------------------+------------------------------------|
| Better response to dynamic user | Only supports eventual consistency |
| content                         |                                    |
| Better scalability and          | Less control over processing flow  |
| elasticity                      |                                    |
| Better agility and change       | Less certainty over outcome of     |
| management                      | event flow                         |
| Better adaptability and         | Difficult to test and debug        |
| extensibility                   |                                    |
| Better responsiveness and       |                                    |
| performance                     |                                    |
| Better real-time decision       |                                    |
| making                          |                                    |
| Better reaction to situational  |                                    |
| awareness                       |                                    |
|---------------------------------+------------------------------------|
** Space-Based Architecture Style

The /space-based/ architecture is specifically designed to address
problems involving high scalability, elasticity, and high concurrency
issues.

High scalability/elasticity/performance are achieved by removing the
central database as a synchronous constraint in the system and instead
leveraging replicated in-memory data grids. App data is kept in-memory
and replicated among all the active processing units.

There are several architectures that make up a space-based
architecture:
- a processing unit containing the app code
- data pumps to asynchronously send updated data to the database
- data writers that perform the updates from the data pumps
- data readers that read database data and deliver it to processing
  units upon startup

Uses lots of data caching with each processing unit. Great for rapidly
scaling up to a very large load, and then scaling back down when the
load isn't there. Useful for things like concert ticket systems /
auction sites.

** Orchestration-Driven Service-Oriented Architecture

basically a layered architecture, but the files in each are really
services. Bad because deep coupling and many changes needed for every
small change

** Microservices Architecture

Microservices is heavily inspired by ideas in DDD. Particularly
bounded context, a decoupling style.


#+DOWNLOADED: screenshot @ 2024-03-27 08:32:41
[[file:Part_II:_Architecture_Styles/2024-03-27_08-32-41_screenshot.png]]

Each service runs in its own process. Performance is often the
negative side effect of the distributed nature of
microservices. Network calls take much longer than method calls.

*** Granularity

The purpose of service boundaries in microservices is to capture a
domain or workflow. Some guidelines for finding the appropriate
boundaries:

- Purpose
  - each service should be extremely functionally cohesive,
    contributing one significant behavior on behalf of the overall application
- Transactions
  - Bounded contexts are business workflows, and often the entities
    that need to cooperate in a transaction show architects a good
    service boundary. Transactions cause issues in distributed
    architectures, so if architects can avoid them, they generate
    better designs.
- Choreography
  - If an architect builds a set of services that offer excellent
    domain isolation, yet require extensive communication to function,
    the architect may consider bundling these services back into a
    larger service to avoid the communication overhead.

*** Data Isolation

Microservices tries to avoid all kinds of coupling, including shared
schemas and databases used as integration parts. This level of data
isolation creates headaches and provides opportunities. A single
service team can choose a more suitable database without affecting
other teams.

*** Operational Reuse

Given that microservices prefer duplication to coupling, architects
can handle the parts of architecture that benefit from coupling by
using the sidecar pattern. Basically, you embed the reused code across
all services. Once teams know that each service includes a common
sidecar, they can build a service mesh, allowing unified control
across the architecture for concerns like logging and monitoring.

*** Communication

Fundamentally, architects must decide on synchronous or asynchronous
communication. Microservice architectures typically utilize
protocol-aware heterogeneous interoperability:

- Protocol-aware: Because microservices usually don't include a
  centralized integration hub to avoid operational coupling, each
  service should know how to call other services.
- Heterogeneous: microservices fully support polyglot environments,
  where different services use different platforms.
- Interoperability: Services commonly call other services via the
  network to collaborate and send/receive information.

*** Choreography and Orchestration

Choreography utilizes the same communication style as a broker
event-driven architecture -- no central coordinator exists in this
architecture, respecting the bounded context philosophy.

*** Transactions and Sagas

The best advice for architects who want to do transactions across
services is: don't! Fix the granularity of the components
instead. Often, architects who build microservice architectures who
then find a need to wire them together with transactions have gone too
granular in their design.

A few transactions across services is sometimes necessary; if it's the
dominant feature of the architecture, mistakes were made!


#+DOWNLOADED: screenshot @ 2024-03-27 08:57:23
[[file:Part_II:_Architecture_Styles/2024-03-27_08-57-23_screenshot.png]]
** Choosing the Appropriate Architecture Style

*** Decision Criteria

- The domain
- Architecture characteristics that impact structure
- Data architecture
- Organizational factors
- Knowledge of process, teams, and operational concerns
- Domain/architecture isomorphism

Taking these things into acount, the architext must make several
determinations:

- Monolith vs. Distributed
- Where should data live?
- What communication styles between services -- synchronous or
  asynchronous?
  - Because synchronous communication presents fewer design,
    implementation, and debugging challenges, architects should
    default to synchronous when possible and use asynchronous when
    necessary.

* Part III: Techniques and Soft Skills

** Architecture Decisions

The 3 major architecture anti-patterns are:
- cover your assets
  - occurs when the architect avoids or defers making an architecture
    decision out of fear of making the wrong choice.
- groundhog day
  - people don't know why a decision was made, so it keeps getting
    dicussed over and over.
- email driven architecture
  - where people lose, forget, or don't know how an architecture
    decision has been made and therefore cannot possibly implement it.

ADR Format
- Title
- Status
- Context
- Decision
- Consequences
- Compliance
- Notes

** Analyzing Architecture Risk

By continually analyzing risk, the architect can address deficiencies
within the architecture and take corrective action to mitigate the
risk.

The architect gauges the risk of each component based on it's ilities

** Diagramming and Presenting Architecture

These guys are literally talking about switching between slides. Talk
about f l u f f. Pretty wild for a $70 book

** Making Teams Effective

Lever the control an architect has based on timelines and various
other factors like seniority of teams and cohesion.

Checklists are helpful to ensure key steps in a process aren't missed.

** Negotiation and Leadership Skills
